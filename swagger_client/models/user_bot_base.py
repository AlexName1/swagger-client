# coding: utf-8

"""
    Rest DB

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UserBotBase(BaseModel):
    """
    UserBotBase
    """ # noqa: E501
    id: Optional[StrictInt] = None
    user_id: Optional[StrictInt] = None
    bot_token: Optional[StrictStr] = None
    last_mess: Optional[StrictInt] = None
    items: Optional[StrictStr] = None
    new_user: Optional[StrictBool] = None
    subscribe_channel: Optional[StrictBool] = None
    utm_mark_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "user_id", "bot_token", "last_mess", "items", "new_user", "subscribe_channel", "utm_mark_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UserBotBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if bot_token (nullable) is None
        # and model_fields_set contains the field
        if self.bot_token is None and "bot_token" in self.model_fields_set:
            _dict['bot_token'] = None

        # set to None if last_mess (nullable) is None
        # and model_fields_set contains the field
        if self.last_mess is None and "last_mess" in self.model_fields_set:
            _dict['last_mess'] = None

        # set to None if items (nullable) is None
        # and model_fields_set contains the field
        if self.items is None and "items" in self.model_fields_set:
            _dict['items'] = None

        # set to None if new_user (nullable) is None
        # and model_fields_set contains the field
        if self.new_user is None and "new_user" in self.model_fields_set:
            _dict['new_user'] = None

        # set to None if subscribe_channel (nullable) is None
        # and model_fields_set contains the field
        if self.subscribe_channel is None and "subscribe_channel" in self.model_fields_set:
            _dict['subscribe_channel'] = None

        # set to None if utm_mark_id (nullable) is None
        # and model_fields_set contains the field
        if self.utm_mark_id is None and "utm_mark_id" in self.model_fields_set:
            _dict['utm_mark_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UserBotBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "user_id": obj.get("user_id"),
            "bot_token": obj.get("bot_token"),
            "last_mess": obj.get("last_mess"),
            "items": obj.get("items"),
            "new_user": obj.get("new_user"),
            "subscribe_channel": obj.get("subscribe_channel"),
            "utm_mark_id": obj.get("utm_mark_id")
        })
        return _obj



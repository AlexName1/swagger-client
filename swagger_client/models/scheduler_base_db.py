# coding: utf-8

"""
    Rest DB

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, StrictInt

from swagger_client.models.message_tg_base import MessageTgBase
from swagger_client.models.user_bot_base import UserBotBase

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SchedulerBaseDb(BaseModel):
    """
    SchedulerBaseDb
    """ # noqa: E501
    id: Optional[StrictInt] = None
    messages_tg_id: Optional[StrictInt] = None
    users_bots_id: Optional[StrictInt] = None
    trigger_datetime: Optional[datetime] = None
    users_bots: Optional[UserBotBase] = None
    messages_tg: Optional[MessageTgBase] = None
    __properties: ClassVar[List[str]] = ["id", "messages_tg_id", "users_bots_id", "trigger_datetime", "users_bots", "messages_tg"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SchedulerBaseDb from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of users_bots
        if self.users_bots:
            _dict['users_bots'] = self.users_bots.to_dict()
        # override the default output from pydantic by calling `to_dict()` of messages_tg
        if self.messages_tg:
            _dict['messages_tg'] = self.messages_tg.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if messages_tg_id (nullable) is None
        # and model_fields_set contains the field
        if self.messages_tg_id is None and "messages_tg_id" in self.model_fields_set:
            _dict['messages_tg_id'] = None

        # set to None if users_bots_id (nullable) is None
        # and model_fields_set contains the field
        if self.users_bots_id is None and "users_bots_id" in self.model_fields_set:
            _dict['users_bots_id'] = None

        # set to None if trigger_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.trigger_datetime is None and "trigger_datetime" in self.model_fields_set:
            _dict['trigger_datetime'] = None

        # set to None if users_bots (nullable) is None
        # and model_fields_set contains the field
        if self.users_bots is None and "users_bots" in self.model_fields_set:
            _dict['users_bots'] = None

        # set to None if messages_tg (nullable) is None
        # and model_fields_set contains the field
        if self.messages_tg is None and "messages_tg" in self.model_fields_set:
            _dict['messages_tg'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SchedulerBaseDb from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "messages_tg_id": obj.get("messages_tg_id"),
            "users_bots_id": obj.get("users_bots_id"),
            "trigger_datetime": obj.get("trigger_datetime"),
            "users_bots": UserBotBase.from_dict(obj.get("users_bots")) if obj.get("users_bots") is not None else None,
            "messages_tg": MessageTgBase.from_dict(obj.get("messages_tg")) if obj.get("messages_tg") is not None else None
        })
        return _obj

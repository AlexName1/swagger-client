# coding: utf-8

"""
    Rest DB

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PartnerBase(BaseModel):
    """
    PartnerBase
    """ # noqa: E501
    id: Optional[StrictInt] = None
    user_bot_id: Optional[StrictInt] = None
    reserve_balance: Optional[StrictStr] = None
    card_number: Optional[StrictStr] = None
    telephone: Optional[StrictStr] = None
    full_name: Optional[StrictStr] = None
    bank_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "user_bot_id", "reserve_balance", "card_number", "telephone", "full_name", "bank_name"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PartnerBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if user_bot_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_bot_id is None and "user_bot_id" in self.model_fields_set:
            _dict['user_bot_id'] = None

        # set to None if reserve_balance (nullable) is None
        # and model_fields_set contains the field
        if self.reserve_balance is None and "reserve_balance" in self.model_fields_set:
            _dict['reserve_balance'] = None

        # set to None if card_number (nullable) is None
        # and model_fields_set contains the field
        if self.card_number is None and "card_number" in self.model_fields_set:
            _dict['card_number'] = None

        # set to None if telephone (nullable) is None
        # and model_fields_set contains the field
        if self.telephone is None and "telephone" in self.model_fields_set:
            _dict['telephone'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['full_name'] = None

        # set to None if bank_name (nullable) is None
        # and model_fields_set contains the field
        if self.bank_name is None and "bank_name" in self.model_fields_set:
            _dict['bank_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PartnerBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "user_bot_id": obj.get("user_bot_id"),
            "reserve_balance": obj.get("reserve_balance"),
            "card_number": obj.get("card_number"),
            "telephone": obj.get("telephone"),
            "full_name": obj.get("full_name"),
            "bank_name": obj.get("bank_name")
        })
        return _obj


